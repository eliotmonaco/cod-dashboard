---
title: "Cause of Death Explorer"
format:
  dashboard:
    theme:
      - default
      - custom.scss
server: shiny
---

```{r message=FALSE}
#| context: setup

source("scripts/setup.R")
```

# {.sidebar}

:::{.sb-filter-group}

## Plot filters

```{r}
sliderInput(
  inputId = "ranks",
  label = "Ranks",
  min = 10,
  max = length(cod_cdc),
  value = 10,
  step = 1,
  ticks = FALSE
)

sliderInput(
  inputId = "years",
  label = "Years",
  min = yrsrng[1],
  max = yrsrng[2],
  value = yrsrng,
  step = 1,
  sep = "",
  ticks = FALSE
)
```

:::
:::{.sb-filter-group}

## Data filters

```{r}
radioButtons(
  inputId = "codset",
  label = "COD definitions",
  choices = codlist
)

selectInput(
  inputId = "agebin",
  label = "Age bin",
  choices = agelist
)

# shinyWidgets::numericRangeInput(
#   inputId = "age",
#   label = "Age",
#   value = c(0, maxage),
#   min = 0,
#   max = maxage,
#   step = 1
# )

sliderInput(
  inputId = "agerng",
  label = "Age range",
  min = 0,
  max = maxage,
  value = c(0, maxage),
  step = 1,
  ticks = FALSE
)

selectInput(
  inputId = "sex",
  label = "Sex",
  choices = sexlist
)

selectInput(
  inputId = "race",
  label = "Race",
  choices = racelist
)

selectInput(
  inputId = "hispanic",
  label = "Hispanic origin",
  choices = hispaniclist
)

selectInput(
  inputId = "education",
  label = "Education level",
  choices = edlist
)

selectInput(
  inputId = "pregnancy",
  label = "Pregnancy status",
  choices = preglist,
  selected = preglist[[1]],
  multiple = TRUE
)

selectInput(
  inputId = "district",
  label = "Council district",
  choices = distlist
)
```

:::
:::{.sb-filter-group}

## Reset filters

```{r}
actionButton(
  inputId = "reset",
  label = "Reset all"
)
```

:::

# Overview

## Row {height="10%"}

```{r}
value_box(
  title = textOutput("nd_text"),
  value = textOutput("nd_val"),
  showcase = bs_icon("bar-chart-fill"),
  theme = value_box_theme(bg = "#fae6fd", fg = "#78008a"),
  min_height = "100px",
  fill = TRUE
)
```

```{r}
value_box(
  title = textOutput("ndr_text"),
  value = textOutput("ndr_val"),
  showcase = bs_icon("bar-chart"),
  theme = value_box_theme(bg = "#e6fdea", fg = "#018a19"),
  min_height = "100px",
  fill = TRUE
)
```

## Row

```{r}
#| title: "Annual deaths in Kansas City, MO"

highchartOutput("ann1")
```

## Row

```{r}
#| title: "Annual deaths in Kansas City, MO, as a percentage of population"

highchartOutput("ann2")
```

# Leading causes

## Row

```{r}
plotOutput("bump")
```

# Cause breakdown

## {.toolbar}

```{r}
selectInput(
  inputId = "codcat",
  label = "Rankable COD category",
  choices = sort(names(cod_cdc))
)
```

## Table

```{r}
DTOutput("table")
```

```{r}
#| context: server

# Set `age()` value based on which age input is changed
age <- reactiveVal(0:maxage)

observeEvent(input$agebin, {
  if (input$agebin != "all") {
    age(unlist(strsplit(input$agebin, ";")))
  } else {
    age(0:maxage)
  }
})

observeEvent(input$agerng, {
  age(seq(input$agerng[1], input$agerng[2], 1))
})

# Filter `vrd` dataset
data <- reactive({
  df <- filter_vrd(
    vrd,
    cod_set = input$codset,
    years_input = input$years,
    age_input = age(),
    sex_input = input$sex,
    race_input = input$race,
    hispanic_input = input$hispanic,
    education_input = input$education,
    pregnancy_input = input$pregnancy,
    district_input = input$district
  )
  
  validate(need(df, "There are no records matching the selection criteria"))
  
  df
})

# Value boxes
yr <- reactive({input$years[2]})

n_deaths <- reactive({
  annual_deaths |>
    filter(year == yr()) |>
    pull(n)
})

n_rankable_deaths <- reactive({
  annual_deaths |>
    filter(year == yr()) |>
    pull(n_rankable)
})

output$nd_text <- renderText({
  paste("Total deaths in", yr())
})

output$nd_val <- renderText({
  format(n_deaths(), big.mark = ",")
})

output$ndr_text <- renderText({
  paste("Total rankable deaths in", yr())
})

output$ndr_val <- renderText({
  format(n_rankable_deaths(), big.mark = ",")
})

# Toggle COD set (CDC vs modified)
cod_set_list <- reactive({
  if (input$codset == "cdc") {
    cod_cdc
  } else if (input$codset == "mod") {
    cod_mod
  }
})

# Caption text
caption <- reactive({
  cod_bump_caption(
    names = filternames,
    inputs = input,
    filters = datafilters,
    ages = age()
  )
})

# Leading COD bump chart
output$bump <- renderPlot({
  data() |>
    config_bump_data(colors = cod_colors) |>
    cod_bump_chart(
      xvals = input$years,
      nranks = input$ranks,
      caption = caption()
    )
})

# COD breakdown table
output$table <- renderDT({
  data() |>
    rankable_cod_summary(
      year = input$years[2],
      cod_name = input$codcat,
      cod_list = cod_set_list()
    ) |>
    cod_table(
      year = input$years[2],
      cod_name = input$codcat
    )
})

# Update COD breakdown menu based on COD category selection
observe({
  if (input$codset == "cdc") {
    updateSelectInput(
      session,
      inputId = "codcat",
      label = "Rankable COD category",
      choices = sort(names(cod_cdc))
    )
  } else if (input$codset == "mod") {
    updateSelectInput(
      session,
      inputId = "codcat",
      label = "Rankable COD category",
      choices = sort(names(cod_mod))
    )
  }
})

# Reset button
observeEvent(input$reset, {
  updateNumericInput(session, "ranks", value = 10)
  updateNumericInput(session, "years", value = yrsrng)
  updateNumericInput(session, "agebin", value = agelist[[1]])
  updateNumericInput(session, "agerng", value = c(0, maxage))
  updateNumericInput(session, "sex", value = sexlist[[1]])
  updateNumericInput(session, "race", value = racelist[[1]])
  updateNumericInput(session, "hispanic", value = hispaniclist[[1]])
  updateNumericInput(session, "education", value = edlist[[1]])
  updateNumericInput(session, "pregnancy", value = preglist[[1]])
  updateNumericInput(session, "district", value = distlist[[1]])
})

# Annual deaths plots
output$ann1 <- renderHighchart({
  plot_ann_deaths(
    annual_deaths |>
      select(year, "All deaths" = n, "Rankable deaths" = n_rankable),
    type = "n"
  )
})

output$ann2 <- renderHighchart({
  plot_ann_deaths(
    annual_deaths |>
      select(year, "All deaths" = pct, "Rankable deaths" = pct_rankable),
    type = "pct"
  )
})
```

