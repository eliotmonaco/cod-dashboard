---
title: "Cause of Death Explorer"
format:
  dashboard:
    theme:
      - default
      - custom.scss
server: shiny
---

```{r message=FALSE}
#| context: setup

source("scripts/setup.R")
```

# {.sidebar}

## Plot filters

```{r}
sliderInput(
  inputId = "ranks",
  label = "Ranks",
  min = 10,
  max = length(cod_cdc),
  value = 10,
  step = 1
)

sliderInput(
  inputId = "years",
  label = "Years",
  min = yrsrng[1],
  max = yrsrng[2],
  value = yrsrng,
  step = 1,
  sep = ""
)
```

## Data filters

```{r}
radioButtons(
  inputId = "cod_set",
  label = "COD categories",
  choices = catlist
)

selectInput(
  inputId = "age",
  label = "Age",
  choices = agelist
)

selectInput(
  inputId = "sex",
  label = "Sex",
  choices = sexlist
)

selectInput(
  inputId = "race",
  label = "Race",
  choices = racelist
)

selectInput(
  inputId = "hispanic",
  label = "Hispanic origin",
  choices = hispaniclist
)

selectInput(
  inputId = "education",
  label = "Education level",
  choices = edlist
)

selectInput(
  inputId = "pregnancy",
  label = "Pregnancy status",
  choices = preglist
)

selectInput(
  inputId = "dist",
  label = "Council district",
  choices = distlist
)
```

## Reset

```{r}
actionButton(
  inputId = "reset",
  label = "Reset filters"
)
```

# Overview

## Row {height = "10%"}

```{r}
# #| content: valuebox
# #| title: "Total deaths"
# 
# list(
#   icon = ,
#   color = ,
#   value = textOutput("nd")
# )

value_box(
  # title = paste("Total deaths in", input$years[2]),
  title = paste("Total deaths in", textOutput("yr")),
  value = textOutput("nd"),
  showcase = bs_icon("clock"),
  theme = "purple"
)
```

## Row

```{r}
highchartOutput("ann1")
```

## Row

```{r}
highchartOutput("ann2")
```

# Leading causes

```{r}
plotOutput("bump")
```

# Cause breakdown

## {.toolbar}

```{r}
selectInput(
  inputId = "codcat",
  label = "Rankable COD category",
  choices = sort(names(cod_cdc))
)
```

## Table

```{r}
DTOutput("table")
```

```{r}
#| context: server

data <- reactive({
  df <- filter_vrd(
    vrd,
    cod_set = input$cod_set,
    years_input = input$years,
    age_input = input$age,
    sex_input = input$sex,
    race_input = input$race,
    hispanic_input = input$hispanic,
    education_input = input$education,
    pregnancy_input = input$pregnancy,
    district_input = input$dist
  )
  
  validate(need(df, "There are no records matching the selection criteria"))
  
  df
})

yr <- reactive({input$years[2]})

output$yr <- renderText({yr()})

n_deaths <- reactive({
  annual_deaths |>
    filter(year == yr()) |>
    pull(n)
})

cod_src_list <- reactive({
  if (input$cod_set == "cdc") {
    cod_cdc
  } else if (input$cod_set == "mod") {
    cod_mod
  }
})

output$nd <- renderText({
  format(n_deaths(), big.mark = ",")
})

# Leading COD bump chart
output$bump <- renderPlot({
  data() |>
    config_bump_data(colors = cod_colors) |>
    cod_bump_chart(xvals = input$years, nranks = input$ranks)
})

# COD breakdown table
output$table <- renderDT({
  data() |>
    rankable_cod_summary(
      year = input$years[2],
      cod_name = input$codcat,
      cod_list = cod_src_list()
    ) |>
    cod_table(
      year = input$years[2],
      cod_name = input$codcat
    )
})

# Update COD breakdown menu based on COD category selection
observe({
  if (input$cod_set == "cdc") {
    updateSelectInput(
      session,
      inputId = "codcat",
      label = "Rankable COD category",
      choices = sort(names(cod_cdc))
    )
  } else if (input$cod_set == "mod") {
    updateSelectInput(
      session,
      inputId = "codcat",
      label = "Rankable COD category",
      choices = sort(names(cod_mod))
    )
  }
})

# Reset button
observeEvent(input$reset, {
  updateNumericInput(session, "ranks", value = 10)
  updateNumericInput(session, "years", value = yrsrng)
  updateNumericInput(session, "age", value = agelist[[1]])
  updateNumericInput(session, "sex", value = sexlist[[1]])
  updateNumericInput(session, "race", value = racelist[[1]])
  updateNumericInput(session, "hispanic", value = hispaniclist[[1]])
  updateNumericInput(session, "education", value = edlist[[1]])
  updateNumericInput(session, "pregnancy", value = preglist[[1]])
  updateNumericInput(session, "dist", value = distlist[[1]])
})

# Annual deaths plots
output$ann1 <- renderHighchart({
  plot_ann_deaths(
    annual_deaths |>
      select(year, "Deaths" = n, "Rankable deaths" = n_rankable),
    type = "n"
  )
})

output$ann2 <- renderHighchart({
  plot_ann_deaths(
    annual_deaths |>
      select(year, "Deaths" = pct, "Rankable deaths" = pct_rankable),
    type = "pct"
  )
})
```



